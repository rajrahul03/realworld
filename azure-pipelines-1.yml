trigger:
- main

stages:
- stage: Lint
  displayName: 'Lint'
  jobs:
  - job: linting
    displayName: 'Linting'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'


    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        npm run prettier:check
      displayName: 'Check prettier'

- stage: Build
  displayName: 'Build'
  jobs:
  - job: 
    displayName: 'conduit-demo'
#    dependsOn: none
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '16.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        npx nx build conduit-demo
      displayName: 'Build demo'

  - job: deploy_other_service
    displayName: 'Deploy Other Service'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '16.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        npx nx build api
      displayName: 'Build api'    

- stage: UnitTesting
  displayName: 'UnitTest'
  jobs:
  - job: unittest
    displayName: 'Unit Test'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'


    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        npx nx build
      displayName: 'Build application'
  - job: unit_testing_api
    displayName: 'Unit Testing (API)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        npm run test --ci --lastCommit --maxWorkers=50%
      displayName: 'Check unit tests (API)'

  - job: unit_testing_demo
    displayName: 'Unit Testing (Demo)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'


    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'
      condition: ne(variables['Agent.CacheRestored'], 'true')

    - script: |
        echo "No unit tests for demo"
      displayName: 'Check unit tests'


- stage: DockerbuildPush
  displayName: 'Docker Stage'
  jobs:
  - job: buildandpushconduitdemo
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        repository: 'rajrahul03/conduit-demo'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'dockerhub'
        tags: |
          $(Build.BuildId)  
  # - job: buildandpush
  #   displayName: 'Build and Push Docker Image'
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #   - checkout: self
  #   - task: Docker@2
  #     inputs:
  #       command: 'buildAndPush'
  #       repository: 'rajrahul03/conduit-api'
  #       dockerfile: '$(Build.SourcesDirectory)/Dockerfile-api'
  #       containerRegistry: 'dockerhub'
  #       tags: |
  #         $(Build.BuildId)              