trigger:
- main
variables:
- group: acr

stages:
- stage: Lint
  displayName: 'Lint'
  jobs:
  - job: linting
    displayName: 'Linting'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'

    - script: |
        npm run prettier:check
      displayName: 'Check prettier'

- stage: Build
  displayName: 'Build'
  jobs:
  - job: 
    displayName: 'Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '16.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'

    - script: |
        npx nx build demo
      displayName: 'Build demo'

- stage: UnitTest
  displayName: 'Unit Test'
  jobs:

  - job: unit_testing
    displayName: 'Unit Testing'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UseNode@1
      inputs:
        version: '18.x'
        checkLatest: true

    - script: |
        echo "##vso[task.setvariable variable=nodeVersion]$(node -v)"
      displayName: 'Get node version'

    - script: |
        npm ci --no-audit --prefer-offline --progress=false
      displayName: 'Install dependencies'

    - script: |
        npm run test --ci --lastCommit --maxWorkers=50%
      displayName: 'Check unit tests'
      continueOnError: true


- stage: DockerbuildPush
  displayName: 'Containerize'
  jobs:
  - job: buildandpush
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - bash: |
        docker login realworldacr.azurecr.io -u $(dockeruser) -p $(dockerpass)
        docker build . -t realworldacr.azurecr.io/demoapp:$(Build.BuildNumber)
        docker push realworldacr.azurecr.io/demoapp:$(Build.BuildNumber)
      displayName: 'Bash Script'        

- stage: Deploy
  displayName: Deploy to DEV
  jobs:
  - job: DeployHelmChart
    displayName: Deploy Helm Chart to AKS
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: HelmInstaller@1
      inputs:
        helmVersion: 'latest'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure-Terraform'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Change directory to the Helm chart location
          az aks get-credentials --resource-group dev --name aks-cluster --overwrite-existing
          cd $(Build.SourcesDirectory)/helm/realworld
          
          # Install/Upgrade Helm chart
          helm upgrade --install realworld . \
            --set image.repository=realworldacr.azurecr.io/demoapp \
            --set image.tag='$(Build.BuildNumber)' \
            --namespace dev
